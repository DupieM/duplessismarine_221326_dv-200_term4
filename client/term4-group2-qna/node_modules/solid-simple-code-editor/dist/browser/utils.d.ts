type DefaultAdded<Source extends object, Defaults extends Partial<Source>> = {
    [key in keyof (Source & Defaults)]: key extends keyof Source ? NonNullable<Source[key]> : never;
};
/**
 * Merges two objects maintaining reactivity.
 *
 * @param source The source object
 * @param defaults The default values
 * @returns The merged object
 */
export declare const mergeDefaults: <T extends object, D extends Partial<T>>(source: T, defaults: D) => DefaultAdded<T, D>;
/**
 * Given a set of string arguments, join the values together into a string with
 * spaces. Falsey values will be omitted,
 * e.g. classNames(['A', 'B', false, 'D', false]) --> 'A B D'
 * @param inputs The set of values
 * @returns The values joined as a string, or blank string if no values
 */
export declare const clsx: (...inputs: (string | boolean | undefined)[]) => string;
/**
 * Gets the specified lines from a multi-line text.
 * @param text The text from which the styles need to be extracted
 * @param position The end position
 * @returns The specified lines.
 */
export declare const getLines: (text: string, position: number) => string[];
/**
 * Checks if a character is one of the enclosing characters.
 * @param char The character to be tested
 * @returns whether the character is an enclosing character
 */
export declare const isEnclosingCharacter: (char: string) => char is "(" | "[" | "{" | "'" | "\"" | "`";
/**
 * Checks if a keyboard action is an undo action
 * @param event The keyboard event
 * @returns whether the key stroke corresponds to an undo action
 */
export declare const isUndo: (event: KeyboardEvent) => boolean;
/**
 * Checks if a keyboard action is a redo action
 * @param event The keyboard event
 * @returns whether the key stroke corresponds to a redo action
 */
export declare const isRedo: (event: KeyboardEvent) => boolean;
/**
 * Checks if a keyboard action is a capture toggle action
 * @param event The keyboard event
 * @returns whether the key stroke corresponds to a capture toggle action
 */
export declare const isCaptureToggle: (event: KeyboardEvent) => boolean;
export type Record = {
    value: string;
    selectionStart: number;
    selectionEnd: number;
};
export type History = {
    stack: (Record & {
        timestamp: number;
    })[];
    offset: number;
};
/**
 * Records a change in the history.
 * @param history The instance of the history being used
 * @param record The change record
 * @param overwrite Whether the record should overwrite the history
 */
export declare const recordChange: (history: History, record: Record, overwrite?: boolean) => void;
export {};
