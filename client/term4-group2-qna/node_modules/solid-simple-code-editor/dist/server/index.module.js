import { ssrElement, mergeProps as mergeProps$1, ssr, ssrAttribute, escape, ssrStyle } from 'solid-js/web';
import { mergeProps, splitProps, createMemo, onMount } from 'solid-js';

const TEXTAREA_CLASS = 'npm__solid-simple-code-editor__textarea';
const SHOW_PLACEHOLDER_STYLES = /* CSS */`
/**
 * Reset the text fill color to make placeholder visible when there
 * is no text
 */
.${TEXTAREA_CLASS}:placeholder-shown {
  -webkit-text-fill-color: inherit !important;
}
`;
const STYLES = {
  CONTAINER: {
    'box-sizing': 'border-box',
    'text-align': 'left',
    overflow: 'hidden',
    padding: 0,
    position: 'relative'
  },
  TEXTAREA: {
    '-moz-osx-font-smoothing': 'grayscale',
    '-webkit-font-smoothing': 'antialiased',
    '-webkit-text-fill-color': 'transparent',
    color: 'inherit',
    height: '100%',
    left: 0,
    overflow: 'hidden',
    position: 'absolute',
    resize: 'none',
    top: 0,
    width: '100%'
  },
  HIGHLIGHT: {
    'pointer-events': 'none',
    position: 'relative'
  },
  EDITOR: {
    'box-sizing': 'inherit',
    'font-family': 'inherit',
    'font-size': 'inherit',
    'font-style': 'inherit',
    'font-variant-ligatures': 'inherit',
    'font-weight': 'inherit',
    'letter-spacing': 'inherit',
    'line-height': 'inherit',
    'overflow-wrap': 'break-word',
    'tab-size': 'inherit',
    'text-indent': 'inherit',
    'text-rendering': 'inherit',
    'text-transform': 'inherit',
    'white-space': 'pre-wrap',
    'word-break': 'keep-all',
    background: 'none',
    border: 0,
    display: 'inherit',
    margin: 0
  }
};

/**
 * Merges two objects maintaining reactivity.
 *
 * @param source The source object
 * @param defaults The default values
 * @returns The merged object
 */
const mergeDefaults = (source, defaults) => mergeProps(defaults, source);

/**
 * Given a set of string arguments, join the values together into a string with
 * spaces. Falsey values will be omitted,
 * e.g. classNames(['A', 'B', false, 'D', false]) --> 'A B D'
 * @param inputs The set of values
 * @returns The values joined as a string, or blank string if no values
 */
const clsx = (...inputs) => inputs.filter(Boolean).join(' ');

const _tmpl$ = ["<textarea autocapitalize=\"off\" autocomplete=\"off\"", "", "", " style=\"", "\"", "></textarea>"],
  _tmpl$2 = ["<style>", "</style>"];
const Editor = props => {
  const fixedProps = mergeDefaults(props, {
    ignoreTabKey: false,
    insertSpaces: true,
    padding: 0,
    tabSize: 2
  });
  const [local, rest] = splitProps(fixedProps, [
  // Component props
  'highlight', 'ignoreTabKey', 'insertSpaces', 'padding', 'style', 'tabSize', 'value', 'onValueChange',
  // Custom textarea props
  'textareaId', 'textareaClass',
  // Custom pre props
  'preClass',
  // Textarea native props
  'autofocus', 'disabled', 'form', 'maxLength', 'minLength', 'name', 'onBlur', 'onClick', 'onFocus', 'onKeyDown', 'onKeyUp', 'placeholder', 'readOnly', 'required']);

  /***********************
   * Computed properties *
   ***********************/
  const contentStyle = createMemo(() => typeof local.padding === 'object' ? local.padding : {
    padding: local.padding
  });
  const highlighted = createMemo(() => local.highlight(local.value));

  /*******************
   * Lifecycle hooks *
   *******************/

  onMount(() => {
    return;
  });
  return ssrElement("div", mergeProps$1(rest, {
    get style() {
      return {
        ...STYLES.CONTAINER,
        ...local.style
      };
    }
  }), [ssr(_tmpl$, ssrAttribute("autofocus", local.autofocus, true) + ssrAttribute("class", escape(clsx(TEXTAREA_CLASS, local.textareaClass), true), false) + ssrAttribute("data-gramm", escape(false, true), false), ssrAttribute("disabled", local.disabled, true) + ssrAttribute("form", escape(local.form, true), false) + ssrAttribute("id", escape(local.textareaId, true), false) + ssrAttribute("maxlength", escape(local.maxLength, true), false) + ssrAttribute("minlength", escape(local.minLength, true), false) + ssrAttribute("name", escape(local.name, true), false) + ssrAttribute("placeholder", escape(local.placeholder, true), false) + ssrAttribute("readonly", escape(local.readOnly, true), false), ssrAttribute("required", local.required, true) + ssrAttribute("spellcheck", escape(false, true), false), ssrStyle({
    ...STYLES.EDITOR,
    ...STYLES.TEXTAREA,
    ...contentStyle()
  }), ssrAttribute("value", escape(local.value, true), false)), ssrElement("pre", mergeProps$1({
    "aria-hidden": "true",
    get ["class"]() {
      return local.preClass;
    },
    get style() {
      return {
        ...STYLES.EDITOR,
        ...STYLES.HIGHLIGHT,
        ...contentStyle()
      };
    }
  }, () => typeof highlighted() === 'string' ? {
    innerHTML: `${highlighted()}<br/>`
  } : {
    children: highlighted()
  }), undefined, false), ssr(_tmpl$2, SHOW_PLACEHOLDER_STYLES)], false);
};

export { Editor, Editor as default };
//# sourceMappingURL=index.module.js.map
