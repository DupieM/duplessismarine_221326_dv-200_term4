import { Component, JSX, JSXElement } from 'solid-js';
type Padding = JSX.CSSProperties['padding'] | Pick<JSX.CSSProperties, 'padding-block' | 'padding-block-end' | 'padding-block-start' | 'padding-bottom' | 'padding-inline' | 'padding-inline-end' | 'padding-inline-start' | 'padding-left' | 'padding-right' | 'padding-top'>;
type PropsFromTextArea = 'autofocus' | 'disabled' | 'form' | 'maxLength' | 'minLength' | 'name' | 'onBlur' | 'onClick' | 'onFocus' | 'onKeyDown' | 'onKeyUp' | 'placeholder' | 'readOnly' | 'required';
type PickedTextAreaProperties = Pick<JSX.TextareaHTMLAttributes<HTMLTextAreaElement>, PropsFromTextArea>;
type PickedDivProperties = Omit<JSX.HTMLAttributes<HTMLDivElement>, 'style' | PropsFromTextArea>;
type Props = PickedDivProperties & PickedTextAreaProperties & {
    /**************************
     * Props of the component *
     **************************/
    /**
     * Callback which will receive text to highlight. You'll need to
     * return an HTML string or a React element with syntax highlighting
     * using a library such as prismjs.
     * @param value The value of the component
     * @returns The highlighted elements
     */
    highlight: (value: string) => JSXElement;
    /**
     * Whether the editor should ignore tab key presses so that keyboard
     * users can tab past the editor. Users can toggle this behavior using
     * Ctrl+Shift+M (Mac) / Ctrl+M manually when this is false.
     * @default false
     */
    ignoreTabKey?: boolean;
    /**
     * Whether to use spaces for indentation.
     * If you set it to false, you might also want to set tabSize to 1.
     * @default true
     */
    insertSpaces?: boolean;
    /**
     * Optional padding for code.
     * @default 0
     */
    padding?: Padding;
    /**
     * Custom styles for the component.
     */
    style?: JSX.CSSProperties;
    /**
     * The number of characters to insert when pressing tab key.
     * For example, for 4 space indentation, tabSize will be 4
     * and insertSpaces will be true.
     * @default 2
     */
    tabSize?: number;
    /**
     * Current value of the editor i.e. the code to display. This
     * must be a controlled prop.
     */
    value: string;
    /**
     * Callback which is called when the value of the editor changes.
     * You'll need to update the value prop when this is called.
     * @param value The updated value
     */
    onValueChange: (value: string) => void;
    /*****************************
     * Props related to textarea *
     *****************************/
    /**
     * The id for the underlying textarea element. This can be used for linking
     * the text area to a label or other accessibility related mapping.
     */
    textareaId?: string;
    /**
     * A class name for the underlying textarea element. Can be useful for more precise
     * control of its styles.
     */
    textareaClass?: string;
    /************************
     * Props related to pre *
     ************************/
    /**
     * A class name for the underlying pre element. Can be useful for more precise
     * control of its styles.
     */
    preClass?: string;
};
export declare const Editor: Component<Props>;
export default Editor;
